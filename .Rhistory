'county_fips_code',
# Unemployment rates by gender for population aged 16 or older
'funr_16', # Female unemployment rate
'munr_16', # Male unemployment rate
# Labor force participation rates for women aged 20 to 64 with children in different age groups
'flfpr_20to64_under6', # With children under 6 years
'flfpr_20to64_6to17',  # With children aged 6 to 17 years
# Poverty rate among families
'pr_f',
# Total population count
'total_pop',
# Population counts by race
'one_race_w', # White
'one_race_b', # Black
'one_race_i', # American Indian/Alaska Native
'one_race_a', # Asian
'one_race_h', # Hispanic/Latino
'one_race_other', # Other race
# Household counts with children aged 6 to 17, categorizing by parental work status
'h_6to17_both_work', # Both parents working
'h_6to17_fwork',     # Only female parent working
'h_6to17_mwork',     # Only male parent working
# Households with single mothers and children in different age groups
'h_under6_single_m', # With children under 6 years
'h_6to17_single_m',  # With children aged 6 to 17 years
# Median weekly cost of center-based care for children of different age groups
'mc_infant',    # Infant care
'mc_toddler',   # Toddler care
'mc_preschool'  # Preschool care
) %>%
# Group data by county FIPS code
group_by(county_fips_code) %>%
# Calculate mean values for the selected columns, excluding missing values
summarize(mean(cols, na.rm = TRUE))
head(dtf)
head(dft)
# Selecting specific columns from the dataframe and performing group-wise summary
dft <- df %>%
# Select relevant columns for analysis
select(
# FIPS code identifying counties
'county_fips_code',
# Unemployment rates by gender for population aged 16 or older
'funr_16', # Female unemployment rate
'munr_16', # Male unemployment rate
# Labor force participation rates for women aged 20 to 64 with children in different age groups
'flfpr_20to64_under6', # With children under 6 years
'flfpr_20to64_6to17',  # With children aged 6 to 17 years
# Poverty rate among families
'pr_f',
# Total population count
'total_pop',
# Population counts by race
'one_race_w', # White
'one_race_b', # Black
'one_race_i', # American Indian/Alaska Native
'one_race_a', # Asian
'one_race_h', # Hispanic/Latino
'one_race_other', # Other race
# Household counts with children aged 6 to 17, categorizing by parental work status
'h_6to17_both_work', # Both parents working
'h_6to17_fwork',     # Only female parent working
'h_6to17_mwork',     # Only male parent working
# Households with single mothers and children in different age groups
'h_under6_single_m', # With children under 6 years
'h_6to17_single_m',  # With children aged 6 to 17 years
# Median weekly cost of center-based care for children of different age groups
'mc_infant',    # Infant care
'mc_toddler',   # Toddler care
'mc_preschool'  # Preschool care
)
head(dtf)
head(dft)
mean_dft <- dft %>% group_by(county_fips_code) %>% summarize(across(everything(), mean, na.rm = TRUE))
mean_dft <- dft %>% group_by(county_fips_code) %>% summarize(across(everything(), mean, na.rm = TRUE))
head(dft)
mean
# Selecting specific columns from the dataframe and performing group-wise summary
dft <- df %>%
# Select relevant columns for analysis
select(
# FIPS code identifying counties
'county_fips_code',
# Unemployment rates by gender for population aged 16 or older
'funr_16', # Female unemployment rate
'munr_16', # Male unemployment rate
# Labor force participation rates for women aged 20 to 64 with children in different age groups
'flfpr_20to64_under6', # With children under 6 years
'flfpr_20to64_6to17',  # With children aged 6 to 17 years
# Poverty rate among families
'pr_f',
# Total population count
'total_pop',
# Population counts by race
'one_race_w', # White
'one_race_b', # Black
'one_race_i', # American Indian/Alaska Native
'one_race_a', # Asian
'one_race_h', # Hispanic/Latino
'one_race_other', # Other race
# Household counts with children aged 6 to 17, categorizing by parental work status
'h_6to17_both_work', # Both parents working
'h_6to17_fwork',     # Only female parent working
'h_6to17_mwork',     # Only male parent working
# Households with single mothers and children in different age groups
'h_under6_single_m', # With children under 6 years
'h_6to17_single_m',  # With children aged 6 to 17 years
# Median weekly cost of center-based care for children of different age groups
'mc_infant',    # Infant care
'mc_toddler',   # Toddler care
'mc_preschool'  # Preschool care
)
mean_dft <- dft %>% group_by(county_fips_code) %>% summarize(across(everything(), mean, na.rm = TRUE))
mean_dft <- dft %>% group_by(county_fips_code) %>% summarize(across(everything(), mean, na.rm = TRUE))
head(mean_dft)
head(mean_values)
mean_dft <- mean_dft %>% mutate(cost = mc_infant + mc_toddler + mc_preschool)
head(mean_dft)
View(mean_dft)
View(counties)
summary(dft)
summary(mean_dft)
colnames(mean_dft)
library(corrplot)
data_for_correlation <- mean_dft[, -1]  # Excludes the first column (county_fips_code)
correlation_matrix <- cor(data_for_correlation, use = "complete.obs")  # Handling missing values
corrplot(correlation_matrix, method = "circle")
cost_correlations <- correlation_matrix["cost", ]
cost_correlations <- correlation_matrix["cost", ]
corrplot(correlation_matrix, method = "circle")
cost_correlations
corrplot(correlation_matrix, method = "circle")
library(car)
library(corrplot)
corrplot(correlation_matrix, method = "circle")
# Exclude non-independent variables
independent_data <- mean_dft %>%
select(-cost, -mc_infant, -mc_toddler, -mc_preschool)
independent_data <- mean_dft %>%
select(-cost, -mc_infant, -mc_toddler, -mc_preschool)
model <- lm(county_fips_code ~ ., data = independent_data)  # Replace 'county_fips_code' with an appropriate variable if needed
vif_values <- vif(model)
print(vif_values)
model <- lm(h_6to17_single_m ~ ., data = independent_data)  # Replace 'county_fips_code' with an appropriate variable if needed
vif_values <- vif(model)
print(vif_values)
model <- lm(funr_16 ~ ., data = independent_data)  # Replace 'county_fips_code' with an appropriate variable if needed
vif_values <- vif(model)
print(vif_values)
install.packages("reshape2")
library(reshape2)
# Reshaping the correlation matrix into a long format
correlation_matrix_long <- melt(correlation_matrix)
ggplot(data = correlation_matrix_long, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = '', y = '', title = 'Correlation Matrix Using ggplot2')
test <- mean_dft %>% select(county_fips_code, cost)
head(test)
test <- mean_dft %>% select(county_fips_code, cost)
# Download county and state boundaries
counties <- counties(cb = TRUE)
states <- states(cb = TRUE)
states$centroid <- st_centroid(states$geometry)
states$abbr <- state.abb[match(states$NAME, state.name)]
# Ensure FIPS is character type
counties$fips <- as.character(counties$GEOID)
test$county_fips_code <- as.character(test$county_fips_code)
map_data <- left_join(counties, test, by = c("fips" = "county_fips_code"))
# plot
ggplot() +
geom_sf(data = map_data, aes(fill = mean_funr_16), color = NA) +
geom_sf(data = states, fill = NA, color = "black", size = 0.5) +
geom_text(data = states, aes(label = abbr, x = st_coordinates(centroid)[,1], y = st_coordinates(centroid)[,2]), check_overlap = TRUE, size = 3, color = "white") +
scale_fill_viridis_c(name = "Mean Cost", option = "C", direction = -1) +
labs(title = "Mean Value of Cost by County",
x = "Longitude",
y = "Latitude") +
coord_sf(xlim = c(-130, -60), ylim = c(25, 50), datum = NA) +
theme_minimal() +
theme(legend.position = "left")
# plot
ggplot() +
geom_sf(data = map_data, aes(fill = cost), color = NA) +
geom_sf(data = states, fill = NA, color = "black", size = 0.5) +
geom_text(data = states, aes(label = abbr, x = st_coordinates(centroid)[,1], y = st_coordinates(centroid)[,2]), check_overlap = TRUE, size = 3, color = "white") +
scale_fill_viridis_c(name = "Mean Cost", option = "C", direction = -1) +
labs(title = "Mean Value of Cost by County",
x = "Longitude",
y = "Latitude") +
coord_sf(xlim = c(-130, -60), ylim = c(25, 50), datum = NA) +
theme_minimal() +
theme(legend.position = "left")
# fisrt check total cost
test <- mean_dft %>% select(county_fips_code, mc_infant)
# Download county and state boundaries
counties <- counties(cb = TRUE)
states <- states(cb = TRUE)
states$centroid <- st_centroid(states$geometry)
states$abbr <- state.abb[match(states$NAME, state.name)]
# Ensure FIPS is character type
counties$fips <- as.character(counties$GEOID)
test$county_fips_code <- as.character(test$county_fips_code)
map_data <- left_join(counties, test, by = c("fips" = "county_fips_code"))
# plot
ggplot() +
geom_sf(data = map_data, aes(fill = mc_infant), color = NA) +
geom_sf(data = states, fill = NA, color = "black", size = 0.5) +
geom_text(data = states, aes(label = abbr, x = st_coordinates(centroid)[,1], y = st_coordinates(centroid)[,2]), check_overlap = TRUE, size = 3, color = "white") +
scale_fill_viridis_c(name = "Mean Infant Cost", option = "C", direction = -1) +
labs(title = "Mean Value of Infant Cost by County",
x = "Longitude",
y = "Latitude") +
coord_sf(xlim = c(-130, -60), ylim = c(25, 50), datum = NA) +
theme_minimal() +
theme(legend.position = "left")
summary(mean_dft)
high_cost < filter(mean_dft, cost > 450)
high_cost <- filter(mean_dft, cost > 450)
high_cost
mean_dft <- arrange(mean_dft, county_fips_code)
head(mean_dft)
# fisrt check total cost
test <- mean_dft %>% select(county_fips_code, cost)
# Download county and state boundaries
counties <- counties(cb = TRUE)
# Download county and state boundaries
counties <- counties(cb = TRUE)
states <- states(cb = TRUE)
states <- states(cb = TRUE)
states$centroid <- st_centroid(states$geometry)
states$abbr <- state.abb[match(states$NAME, state.name)]
# Ensure FIPS is character type
counties$fips <- as.character(counties$GEOID)
test$county_fips_code <- as.character(test$county_fips_code)
map_data <- left_join(counties, test, by = c("fips" = "county_fips_code"))
# plot
ggplot() +
geom_sf(data = map_data, aes(fill = cost), color = NA) +
geom_sf(data = states, fill = NA, color = "black", size = 0.5) +
geom_text(data = states, aes(label = abbr, x = st_coordinates(centroid)[,1], y = st_coordinates(centroid)[,2]), check_overlap = TRUE, size = 3, color = "white") +
scale_fill_viridis_c(name = "Mean Cost", option = "C", direction = -1) +
labs(title = "Mean Value of Cost by County",
x = "Longitude",
y = "Latitude") +
coord_sf(xlim = c(-130, -60), ylim = c(25, 50), datum = NA) +
theme_minimal() +
theme(legend.position = "left")
ggplot() +
geom_sf(data = map_data, aes(fill = cost), color = NA) +
geom_sf(data = states, fill = NA, color = "black", size = 0.5) +
geom_text(data = states, aes(label = abbr, x = st_coordinates(centroid)[,1], y = st_coordinates(centroid)[,2]), check_overlap = TRUE, size = 3, color = "white") +
scale_fill_viridis_c(name = "Mean Cost", option = "C", direction = -1) +
labs(title = "Mean Value of Cost by County",
subtitle = "Comparison of Childcare Costs Across Different Counties",
caption = "Source: Childcare Cost Data | Map Data: US Census Bureau",
x = "Longitude",
y = "Latitude") +
coord_sf(xlim = c(-130, -60), ylim = c(25, 50), datum = NA) +
theme_minimal() +
theme(legend.position = "left",
plot.title = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 8))
# fisrt check total cost
test_1 <- mean_dft %>% select(county_fips_code, mc_infant)
test_1$county_fips_code <- as.character(test_1$county_fips_code)
map_data <- left_join(counties, test_1, by = c("fips" = "county_fips_code"))
# plot
ggplot() +
geom_sf(data = map_data, aes(fill = mc_infant), color = NA) +
geom_sf(data = states, fill = NA, color = "black", size = 0.5) +
geom_text(data = states, aes(label = abbr, x = st_coordinates(centroid)[,1], y = st_coordinates(centroid)[,2]), check_overlap = TRUE, size = 3, color = "white") +
scale_fill_viridis_c(name = "Mean Infant Cost", option = "C", direction = -1) +
labs(title = "Mean Value of Infant Cost by County",
subtitle = "Comparison of Childcare Costs Across Different Counties",
caption = "Source: Childcare Cost Data | Map Data: US Census Bureau",
x = "Longitude",
y = "Latitude") +
coord_sf(xlim = c(-130, -60), ylim = c(25, 50), datum = NA) +
theme_minimal() +
theme(legend.position = "left")
# plot
ggplot() +
geom_sf(data = map_data, aes(fill = mc_infant), color = NA) +
geom_sf(data = states, fill = NA, color = "black", size = 0.5) +
geom_text(data = states, aes(label = abbr, x = st_coordinates(centroid)[,1], y = st_coordinates(centroid)[,2]), check_overlap = TRUE, size = 3, color = "white") +
scale_fill_viridis_c(name = "Mean Infant Cost", option = "C", direction = -1) +
labs(title = "Mean Value of Infant Cost by County",
subtitle = "Comparison of Childcare Costs Across Different Counties",
caption = "Source: Childcare Cost Data | Map Data: US Census Bureau",
x = "Longitude",
y = "Latitude") +
coord_sf(xlim = c(-130, -60), ylim = c(25, 50), datum = NA) +
theme_minimal() +
theme(legend.position = "right")
# plot
ggplot() +
geom_sf(data = map_data, aes(fill = mc_infant), color = NA) +
geom_sf(data = states, fill = NA, color = "black", size = 0.5) +
geom_text(data = states, aes(label = abbr, x = st_coordinates(centroid)[,1], y = st_coordinates(centroid)[,2]), check_overlap = TRUE, size = 3, color = "white") +
scale_fill_viridis_c(name = "Mean Infant Cost", option = "C", direction = -1) +
labs(title = "Mean Value of Infant Cost by County",
subtitle = "Comparison of Childcare Costs Across Different Counties",
caption = "Source: Childcare Cost Data | Map Data: US Census Bureau",
x = "Longitude",
y = "Latitude") +
coord_sf(xlim = c(-130, -60), ylim = c(25, 50), datum = NA) +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 8))
plot_map <- function(data, fill_variable) {
# Construct the plot title
plot_title <- paste("Mean Value of", fill_variable, "by County")
ggplot() +
geom_sf(data = data, aes_string(fill = fill_variable), color = NA) +
geom_sf(data = states, fill = NA, color = "black", size = 0.5) +
geom_text(data = states, aes(label = abbr, x = st_coordinates(centroid)[,1], y = st_coordinates(centroid)[,2]), check_overlap = TRUE, size = 3, color = "white") +
scale_fill_viridis_c(name = "Mean Cost", option = "C", direction = -1) +
labs(title = plot_title,
subtitle = paste("Comparison of", fill_variable, "Costs Across Different Counties"),
caption = "Source: Childcare Cost Data | Map Data: US Census Bureau",
x = "Longitude", y = "Latitude") +
coord_sf(xlim = c(-130, -60), ylim = c(25, 50), datum = NA) +
theme_minimal() +
theme(legend.position = "left",
plot.title = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 8))
}
# fisrt check total cost
test <- mean_dft %>% select(county_fips_code, cost)
test$county_fips_code <- as.character(test$county_fips_code)
map_data <- left_join(counties, test, by = c("fips" = "county_fips_code"))
plot_map(map_data, cost)
plot_map(map_data, "cost")
# plot
ggplot() +
geom_sf(data = map_data, aes(fill = cost), color = NA) +
geom_sf(data = states, fill = NA, color = "black", size = 0.5) +
geom_text(data = states, aes(label = abbr, x = st_coordinates(centroid)[,1], y = st_coordinates(centroid)[,2]), check_overlap = TRUE, size = 3, color = "white") +
scale_fill_viridis_c(name = "Mean Cost", option = "C", direction = -1) +
labs(title = "Mean Value of Cost by County",
subtitle = "Comparison of Childcare Costs Across Different Counties",
caption = "Source: Childcare Cost Data | Map Data: US Census Bureau",
x = "Longitude",
y = "Latitude") +
coord_sf(xlim = c(-130, -60), ylim = c(25, 50), datum = NA) +
theme_minimal() +
theme(legend.position = "left",
plot.title = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 8))
library(purrr)
mean_dft <- mean_dft %>% mutate(cost = sum_cost(mc_infant,mc_toddler,mc_preschool))
mean_dft <- mean_dft %>%
mutate(cost = pmap_dbl(list(mc_infant, mc_toddler, mc_preschool), sum_cost))
sum_cost <- function(a, b, c) {
a + b + c
}
mean_dft <- mean_dft %>%
mutate(cost = pmap_dbl(list(mc_infant, mc_toddler, mc_preschool), sum_cost))
head(mean_dft)
colnames(mean_dft)
# Reshape the data to long format for faceting
long_data <- mean_dft %>%
select(cost, mc_infant) %>%
pivot_longer(cols = everything(), names_to = "variable", values_to = "value")
library(dplyr)
library(dplyr)
library(tidyr)
# Reshape the data to long format for faceting
long_data <- mean_dft %>%
select(cost, mc_infant) %>%
pivot_longer(cols = everything(), names_to = "variable", values_to = "value")
# Plot using ggplot2 with facet_wrap
ggplot(long_data, aes(x = value)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
facet_wrap(~variable, scales = "free") +
labs(title = "Distribution of Cost and MC Infant",
x = "Value",
y = "Frequency") +
theme_minimal()
# Plot using ggplot2 with facet_wrap
ggplot(long_data, aes(x = value)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
facet_wrap(~variable, scales = "free") +
labs(title = "Distribution of Total Cost and Infant Cost",
x = "Value",
y = "Frequency") +
theme_minimal()
ggplot(long_data, aes(x = value)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
facet_wrap(~variable, scales = "free") +
labs(title = "Distribution of Total Cost and Infant Cost",
subtitle = "Comparative Analysis of Cost Distributions",
caption = "Source: Dataset Name",
x = "Cost Value",
y = "Frequency of Occurrence") +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 14),
plot.caption = element_text(size = 8),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)
)
ggplot(long_data, aes(x = value)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
facet_wrap(~variable, scales = "free") +
labs(title = "Distribution of Total Cost and Infant Cost",
subtitle = "Comparative Analysis of Cost Distributions",
caption = "Source: Tidy Tuesday dataset",
x = "Cost Value",
y = "Frequency of Occurrence") +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 14),
plot.caption = element_text(size = 8),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)
)
ggplot(data = correlation_matrix_long, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = '', y = '', title = 'Correlation Matrix Using ggplot2')
ggplot(data = correlation_matrix_long, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 8)) +
labs(
x = 'Variable 1',
y = 'Variable 2',
title = 'Correlation Matrix Using ggplot2',
subtitle = 'Visualization of Pairwise Correlation Coefficients',
caption = 'Source: Dataset Name'
)
ggplot(data = correlation_matrix_long, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 8)) +
labs(
x = 'Variable 1',
y = 'Variable 2',
title = 'Correlation Matrix Using ggplot2',
subtitle = 'Visualization of Pairwise Correlation Coefficients',
caption = 'Source: Tidy Tuesday Dataset'
)
colnames(mean_dft)
model <- lm(cost ~ . - county_fips_code - mc_infant - mc_toddler - mc_preschool, data = mean_dft)
summary(model)
mean_dft$predicted_values <- predict(model)
# Residual plots
plot(model)
# Q-Q plot for normality
qqnorm(residuals(model))
qqline(residuals(model))
qqnorm(residuals(model))
qqline(residuals(model))
# VIF to check for multicollinearity
vif_model <- vif(model)
print(vif_model)
# total unemployment population:
Unem_pop <- function(a,b,c) {
(a+b)*c
}
test_mean_dft <- mean_dft %>% mutate(cost = pmap_dbl(list(funr_16, munr_16, total_pop), Unem_pop))
View(test_mean_dft)
test_mean_dft <- mean_dft %>% mutate(tot_unem_pop = pmap_dbl(list(funr_16, munr_16, total_pop), Unem_pop))
# example
beginr::plotpch()
library(beginr)
# example
beginr::plotpch()
beginr::plotlty()
beginr::plottype()
# use the function chosen from the beginr package
beginr::plotpairs(mean_dft)
# use the function chosen from the beginr package
plt_test <- mean_dft %>% select(cost, funr_16, munr_16)
beginr::plotpairs(plt_test)
# use the function chosen from the beginr package
plt_test <- mean_dft %>% select(cost, funr_16, munr_16)
beginr::plotpairs(plt_test)
beginr::plottype()
beginr::plothist(mean_dft$mc_toddler)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
